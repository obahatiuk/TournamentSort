package com.olhabahatiuk.tournamentSort;

import java.util.ArrayList;
import java.util.List;

public class TournamentSortAlgorithm {
	
	public List<Integer> sort(List<Integer> numbers) {
		
		List<Integer> branchLeaves1 = new ArrayList<Integer>();
		List<Integer> branchLeaves2 = new ArrayList<Integer>();
		List<Integer> sortedNumbers = new ArrayList<Integer>();
		List<Integer> secondRun = new ArrayList<Integer>();
		Integer topBranch1Number = null;
		Integer topBranch2Number = null;
		
		do {
			
			addNumber(branchLeaves1, numbers);
			addNumber(branchLeaves2, numbers);
			
						
			while (topBranch1Number == null) {
				
				
				if(numbers.size() != 0 || branchLeaves1.size() != 0) {

					topBranch1Number = minNumber(branchLeaves1);

					addNumber(branchLeaves1, numbers);

					if (isLessThanLastSortedNumber(branchLeaves1, sortedNumbers)) {
						
						addNumberToSecondRun (branchLeaves1, secondRun);
						
					}

					if (topBranch1Number != null) {
						
						if(isLessThanTopBranchNumber ( branchLeaves1, topBranch1Number)) {

							 swapTopAndBranchNumber (branchLeaves1, topBranch1Number);
							
						}
						
					}
					
				} else {
					
					break;
					
				}
				

			}
			
			
			while (topBranch2Number == null) {
				
				if(numbers.size() != 0 || branchLeaves2.size() != 0) {
					
					topBranch2Number = minNumber(branchLeaves2);
					
					addNumber(branchLeaves2, numbers);
					
					if (isLessThanLastSortedNumber(branchLeaves2, sortedNumbers)) {
						
						addNumberToSecondRun (branchLeaves2, secondRun);
						
					}
					
					if (topBranch2Number != null) {
						
						if(isLessThanTopBranchNumber ( branchLeaves2, topBranch2Number)) {
							
							 swapTopAndBranchNumber (branchLeaves2, topBranch2Number);
							
						}
						
					}
					
				} else {
					
					break;
					
				}
				

			}
			

			
			
		} while (numbers.size()!=0 ||  secondRun.size() != 0 || branchLeaves1.size() != 0 ||branchLeaves2.size() != 0);
		
		return sortedNumbers;
		
	}
	
	public Integer minNumber(List<Integer> branchLeaves) {
		
		Integer min = (Integer) null;
		
		if (branchLeaves.size() == 1) {
			
			min =  branchLeaves.get(0);
			branchLeaves.remove(0);
			
		} else if(branchLeaves.size() == 2) {
			
			min = (branchLeaves.get(0) < branchLeaves.get(1)? branchLeaves.get(0):branchLeaves.get(1));
			
			branchLeaves.remove(branchLeaves.indexOf(min));
		} 
		
		return min;
		
	}
	
	public Integer getBranchTop(List<Integer> branchLeaves1, List<Integer> branchLeaves2) {
		Integer min = (Integer) null;
		
		if(minNumber(branchLeaves1) != null &  minNumber(branchLeaves2) != null) {
			
			min = (minNumber(branchLeaves1) < minNumber(branchLeaves2)?minNumber(branchLeaves1):minNumber(branchLeaves2));
			if ( min == minNumber(branchLeaves1)) {
				
				branchLeaves1.remove(branchLeaves1.indexOf(branchLeaves1));
			} else {
				
				branchLeaves2.remove(branchLeaves2.indexOf(branchLeaves2));
				
			}
			
		} else if (minNumber(branchLeaves1) != null) {
			
			min = (minNumber(branchLeaves1));
			branchLeaves1.remove(branchLeaves1.indexOf(branchLeaves1));
			
		} else if (minNumber(branchLeaves2) != null) {
			
			min = (minNumber(branchLeaves2));
			branchLeaves2.remove(branchLeaves2.indexOf(branchLeaves2));
			
		} 
		
		return min;
		
	}
	
	public void addNumber(List<Integer> branchLeaves, List<Integer> listOfInputNumbers) {
		
		while (branchLeaves.size() < 2) {
			
			if (listOfInputNumbers.size() != 0 ) {
				
				branchLeaves.add(listOfInputNumbers.get(0));
				listOfInputNumbers.remove(0);
				
			} else {
				
				break;
				
			}
			
		}
		
		
	}
	
	public boolean isLessThanTopBranchNumber ( List<Integer> branchLeaves, Integer topBranchNumber) {
		
		if ( topBranchNumber > branchLeaves.get(1)) {
			
			return true;
			
		} else {
			
			return false;
			
		}
		
	}
	
	public boolean isLessThanLastSortedNumber (List<Integer> branchLeaves, List<Integer> sortedNumbers) {
		
		if (sortedNumbers.size() == 0) {
			
			return false;
			
		} else {
			
			if ( sortedNumbers.get(sortedNumbers.size() - 1) > branchLeaves.get(1)) {
				
				return true;
				
			} else {
				
				return false;
				
			}
			
		}
		
		
		
	}
	
	public void swapTopAndBranchNumber (List<Integer> branchLeaves, Integer topBranchNumber) {
		
		Integer tempInt = branchLeaves.get(1);
		branchLeaves.remove(1);
		branchLeaves.add(topBranchNumber);
		topBranchNumber = tempInt;
		
	}
	
	public void addNumberToSecondRun(List<Integer> branchLeaves, List<Integer> secondRun) {
		
		secondRun.add(branchLeaves.get(1));
		branchLeaves.remove(1);
		
	}

}
